{"version":3,"sources":["components/StatsDisplay.js","components/LineChart.js","components/ToolTip.js","App.js","serviceWorker.js","index.js"],"names":["api_url","StatsDisplay","state","currentPrice","dailyChange","dailyChangeP","monthlyChange","monthlyChangeP","lastUpdated","valueChangeD","valueChangeM","componentDidMount","console","log","data","props","getData","fetch","then","d","json","Data","current_price","bpi","USD","rate_float","daily_change","pValue","daily_changeP","monthly_change","monthly_changeP","last_updated","time","updated","setState","toLocaleString","style","currency","toFixed","catch","e","className","this","moment","fromNow","color","aria-hidden","React","Component","LineChart","hoverLoc","activePoint","index","length","arr","map","obj","Math","min","apply","max","x","svgWidth","yLabelSize","getMaxX","y","svgHeight","xLabelSize","getMaxY","getMinY","pathD","getSvgX","getSvgY","point","i","stroke","x_min","getMinX","x_max","y_min","y_max","x1","y1","x2","y2","transform","textAnchor","date","svgLocation","document","getElementsByClassName","getBoundingClientRect","adjustment","width","relativeLoc","clientX","left","svgData","push","svgX","svgY","p","pDollars","closestPoint","c","abs","stopHover","onHover","pointRadius","r","cx","cy","height","viewBox","onMouseLeave","onMouseMove","getCoords","id","stopColor","offset","fill","makeAxis","makePath","makeArea","makeLabels","createLine","makeActivePoint","defaultProps","ToolTip","placementStyles","App","fetchingData","count","format","a","b","handleHover","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f14336cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst api_url = 'https://api.coindesk.com/v1/bpi/currentprice.json';\r\n\r\nclass StatsDisplay extends React.Component {\r\n\r\n\t/*constructor(props) \r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\tcurrentPrice: null,\r\n\t\t\tdailyChange: null,//24 hour change\r\n\t\t\tdailyChangeP:null,\r\n\t\t\tmonthlyChange: null,//monthly change\r\n\t\t\tmonthlyChangeP: null,\r\n\t\t\tlastUpdated: null\r\n\t\t}\r\n\t}*/\r\n\r\n\tstate={\r\n\t\t\tcurrentPrice: 0,\r\n\t\t\tdailyChange: null,//24 hour change\r\n\t\t\tdailyChangeP:null,\r\n\t\t\tmonthlyChange: null,//monthly change\r\n\t\t\tmonthlyChangeP: null,\r\n\t\t\tlastUpdated: null,\r\n\t\t\tvalueChangeD: -1, // fa icon color\r\n\t\t\tvalueChangeM: -1\r\n\t}\r\n\r\n\tcomponentDidMount = () =>\r\n\t{\r\n\t\tconsole.log('StatsDisplay Component Mounted');\r\n\t\tconst {data} = this.props;\r\n\t\tconsole.log('props:',data);\r\n\t\tthis.getData = () =>{\r\n\t\t\tconst {data} = this.props;\r\n\t\t\t//console.log('props:',data);\r\n\t\t\tfetch(api_url).then(d => d.json()).then((Data)=>{\r\n\t\t\t\t//console.log(Data);\r\n\t\t\t\tconst current_price =  Data.bpi.USD.rate_float;\r\n      \t\t\tconst daily_change = current_price-data[30].pValue;\r\n      \t\t\tconst daily_changeP = (daily_change/data[30].pValue)*100;\r\n      \t\t\tconst monthly_change = current_price-data[0].pValue;\r\n      \t\t\tconst monthly_changeP = ((monthly_change)/data[0].pValue)*100;\r\n      \t\t\tconst last_updated = Data.time.updated;\r\n      \t\t\tthis.setState({\r\n      \t\t\t\tcurrentPrice:current_price,\r\n      \t\t\t\tdailyChange:daily_change.toLocaleString('us-EN',{style:'currency',currency:'USD'}),\r\n      \t\t\t\tdailyChangeP:daily_changeP.toFixed(2) + '%',\r\n      \t\t\t\tmonthlyChange:monthly_change.toLocaleString('us-EN',{style:'currency',currency:'USD'}),\r\n      \t\t\t\tmonthlyChangeP:monthly_changeP.toFixed(2) + '%',\r\n      \t\t\t\tlastUpdated:last_updated, \r\n      \t\t\t\tvalueChangeD:daily_change,\r\n      \t\t\t\tvalueChangeM:monthly_change\r\n      \t\t\t});\r\n\t\t\t}).catch((e)=>{console.log(e);}); \r\n\t\t}\r\n\t\tthis.getData();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"StatsBar\">\r\n\t\t\t\t\t<div className=\"currentPriceBox\">\r\n\t\t\t\t\t\t<div className=\"heading\">PRICE</div>\r\n\t\t\t\t\t\t<div className=\"text\">{this.state.currentPrice.toLocaleString('us-EN',{ style: 'currency', currency: 'USD' })}</div>\r\n\t\t\t\t\t\t<div className=\"text\">{\"Updated \" + moment(this.state.lastUpdated).fromNow()}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"dailyChangeBox\">\r\n\t\t\t\t\t\t<div className=\"heading\">24 HOUR CHANGE </div>\r\n\t\t\t\t\t\t<div className=\"text\">{this.state.dailyChange}</div>\r\n\t\t\t\t\t\t<div className=\"text\">{this.state.valueChangeD >= 0 && <i className=\"fa fa-caret-up fa-1x \" style={{color:\"#66F900\"}} aria-hidden=\"true\"></i>}\r\n\t\t\t\t\t\t\t\t\t\t\t  {this.state.valueChangeD < 0 && <i className=\"fa fa-caret-down fa-1x \" style={{color:\"#F93500\"}} aria-hidden=\"true\"></i>}\t\t\r\n\t\t\t\t\t\t  \t\t\t\t\t  {this.state.dailyChangeP}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"monthlyChangeBox\">\r\n\t\t\t\t\t\t<div className=\"heading\">MONTHLY CHANGE</div>\r\n\t\t\t\t\t\t<div className=\"text\">{this.state.monthlyChange}</div>\r\n\t\t\t\t\t\t<div className=\"text\">{this.state.valueChangeM >= 0 && <i className=\"fa fa-caret-up fa-1x\" style={{color:\"#66F900\"}} aria-hidden=\"true\"></i>} \r\n\t\t\t\t\t\t\t\t\t\t\t  {this.state.valueChangeM < 0 && <i className=\"fa fa-caret-down fa-1x \" style={{color:\"#F93500\"}} aria-hidden=\"true\"></i>}\r\n\t\t\t\t\t\t \t\t\t\t\t  {this.state.monthlyChangeP}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default StatsDisplay;\r\n\t\t\t\t\t\r\n/*<i class=\"fa fa-caret-up\" aria-hidden=\"true\"></i>*/\r\n/*<i class=\"fa fa-caret-down\" aria-hidden=\"true\" style={{color:\"#F93500\"}}></i>*/","import React, {Component} from \"react\";\r\n\r\nclass LineChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hoverLoc: null,\r\n      activePoint: null \r\n    }\r\n  }\r\n  // get min and max x\r\n  getMinX()\r\n  {\r\n    const {data} = this.props;\r\n    return data[0].index;//0 th index\r\n  }\r\n\r\n  getMaxX()\r\n  {\r\n    const {data} = this.props;\r\n    return data[data.length - 1].index;//last index - 31st day\r\n  }\r\n\r\n  // get min and max y\r\n  getMinY()\r\n  {\r\n    const {data} = this.props;\r\n    const arr = data.map(obj => obj.pValue);\r\n    const min_y = Math.min.apply(null,arr);\r\n    return min_y;\r\n  }\r\n\r\n  getMaxY()\r\n  {\r\n    const {data} = this.props;\r\n    const arr = data.map(obj => obj.pValue);\r\n    const max_y = Math.max.apply(null,arr);\r\n    return max_y;\r\n  }\r\n\r\n  // get SVG coordinates\r\n  getSvgX(x) \r\n  {\r\n    const {svgWidth, yLabelSize} = this.props;\r\n    return yLabelSize + (x / this.getMaxX() * (svgWidth - yLabelSize));\r\n  }\r\n\r\n  getSvgY(y) \r\n  {\r\n    const {svgHeight, xLabelSize} = this.props;\r\n    return ((svgHeight - xLabelSize) * this.getMaxY() - (svgHeight - xLabelSize) * y) / (this.getMaxY() - this.getMinY());\r\n  }\r\n\r\n  // build SVG path\r\n  makePath() \r\n  {\r\n    const {data, color} = this.props;\r\n    //let pathD = \"M \" + this.getSvgX(data[0].index) + \" \" + this.getSvgY(data[0].pValue) + \" \";\r\n    let pathD = `M ${this.getSvgX(data[0].index)} ${this.getSvgY(data[0].pValue)} `;\r\n\r\n    pathD += data.map((point, i) => {\r\n      return `L ${this.getSvgX(point.index)} ${this.getSvgY(point.pValue)}   `;\r\n    });\r\n\r\n    return (\r\n      <path className=\"linechart_path\" d={pathD} style={{stroke: color}} />\r\n    );\r\n  }\r\n\r\n  // axis\r\n  makeAxis() \r\n  {\r\n    const {yLabelSize} = this.props;\r\n    const x_min = this.getMinX(),x_max = this.getMaxX();\r\n    const y_min = this.getMinY(),y_max = this.getMaxY();\r\n\r\n    return (\r\n      <g className=\"linechart_axis\">\r\n        <line\r\n          x1={this.getSvgX(x_min) - yLabelSize} y1={this.getSvgY(y_min)}\r\n          x2={this.getSvgX(x_max)} y2={this.getSvgY(y_min)}\r\n        />\r\n        <line\r\n          x1={this.getSvgX(x_min) - yLabelSize} y1={this.getSvgY(y_max)}\r\n          x2={this.getSvgX(x_max)} y2={this.getSvgY(y_max)}\r\n        />\r\n      </g>\r\n    );\r\n  }\r\n\r\n  // shaded area\r\n  makeArea() \r\n  {\r\n    const {data} = this.props;\r\n    let pathD = `M ${this.getSvgX(data[0].index)} ${this.getSvgY(data[0].pValue)} `;\r\n\r\n    pathD += data.map((point, i) => {\r\n      return `L   ${this.getSvgX(point.index)}  ${this.getSvgY(point.pValue)} `;\r\n    });\r\n\r\n    const x_min = this.getMinX(), x_max = this.getMaxX();\r\n    const y_min = this.getMinY(), y_max = this.getMaxY();\r\n    pathD += `L  ${this.getSvgX(x_max)} ${this.getSvgY(y_min)} L ${this.getSvgX(x_min)} ${this.getSvgY(y_min)} `;\r\n\r\n    return <path className=\"linechart_area\" d={pathD} />\r\n  }\r\n\r\n  // labels\r\n  makeLabels()\r\n  {\r\n    const {svgHeight, svgWidth, xLabelSize, yLabelSize} = this.props;\r\n    const padding = 5;\r\n    return(\r\n      <g className=\"linechart_label\">\r\n        {/* Y AXIS LABELS */}\r\n        <text transform={`translate(${yLabelSize/2}, 20)`} textAnchor=\"middle\">\r\n          {this.getMaxY().toLocaleString('us-EN',{ style: 'currency', currency: 'USD' })}\r\n        </text>\r\n        <text transform={`translate(${yLabelSize/2}, ${svgHeight - xLabelSize - padding})`} textAnchor=\"middle\">\r\n          {this.getMinY().toLocaleString('us-EN',{ style: 'currency', currency: 'USD' })}\r\n        </text>\r\n        {/* X AXIS LABELS */}\r\n        <text transform={`translate(${yLabelSize}, ${svgHeight})`} textAnchor=\"start\">\r\n          { this.props.data[0].date }\r\n        </text>\r\n        <text transform={`translate(${svgWidth}, ${svgHeight})`} textAnchor=\"end\">\r\n          { this.props.data[this.props.data.length - 1].date }\r\n        </text>\r\n      </g>\r\n    )\r\n  }\r\n\r\n  // closes point to mouse\r\n  getCoords(e)\r\n  {\r\n    const {svgWidth,data,yLabelSize} = this.props;\r\n    //The Element.getBoundingClientRect() method returns the size of an \r\n    //element and its position relative to the viewport.\r\n    const svgLocation = document.getElementsByClassName(\"linechart\")[0].getBoundingClientRect();\r\n    const adjustment = (svgLocation.width - svgWidth)/2;\r\n    //The clientX read-only property of the MouseEvent interface provides the horizontal coordinate \r\n    //within the application's client area at which the event occurred (as opposed to the coordinate\r\n    // within the page).\r\n    const relativeLoc = e.clientX - svgLocation.left - adjustment;\r\n\r\n    let svgData = [];\r\n    data.map((point,i) => {\r\n      svgData.push({\r\n        svgX: this.getSvgX(point.index),\r\n        svgY: this.getSvgY(point.pValue),\r\n        d: point.date,\r\n        p: point.pDollars,\r\n      });\r\n    });\r\n\r\n    let closestPoint = {};\r\n    for(let i =0,c=svgWidth;i<svgData.length;i++)\r\n    {\r\n      if(Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c)\r\n      {\r\n        c = Math.abs(svgData[i].svgX - this.state.hoverLoc);\r\n        closestPoint = svgData[i];\r\n      }\r\n    }\r\n\r\n    if(relativeLoc - yLabelSize < 0)\r\n    {\r\n      this.stopHover();\r\n    }\r\n    else\r\n    {\r\n      this.setState({\r\n        hoverLoc: relativeLoc,\r\n        activePoint: closestPoint \r\n      });\r\n      this.props.onHover(relativeLoc,closestPoint);\r\n    }\r\n  }\r\n\r\n  //stop hovering\r\n  stopHover()\r\n  {\r\n    this.setState({\r\n      hoverLoc: null,\r\n      activePoint: null \r\n    });\r\n    this.props.onHover(null,null);\r\n  }\r\n\r\n  // make active point\r\n  makeActivePoint()\r\n  {\r\n    const {color,pointRadius} = this.props;\r\n    return(\r\n        <circle className=\"linechart_point\" style={{stroke:color}} \r\n        r={pointRadius} cx={this.state.activePoint.svgX} cy={this.state.activePoint.svgY}\r\n        >  \r\n        </circle>\r\n      );\r\n  }\r\n\r\n  //make hover line\r\n  createLine()\r\n  {\r\n    const {svgHeight, xLabelSize} = this.props;\r\n    return (\r\n          <line className='hoverLine' x1={this.state.hoverLoc} y1={-8} x2={this.state.hoverLoc} y2={svgHeight - xLabelSize}></line>\r\n      );  \r\n  }\r\n\r\n  render() {\r\n    const {svgHeight, svgWidth} = this.props;\r\n\r\n    return (\r\n      <div>\r\n      <svg  width={svgWidth} height={svgHeight} viewBox={`0 0 ${svgWidth} ${svgHeight}`} className={'linechart'}\r\n            onMouseLeave={ () => this.stopHover() } \r\n            onMouseMove={ (e) => this.getCoords(e) } >\r\n\r\n            <linearGradient x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\" id=\"gradient\">\r\n              <stop stopColor=\"#c86dd7\" offset=\"0\"/>\r\n              <stop stopColor=\"#3023ae\" offset=\"100%\"/>\r\n            </linearGradient>\r\n\r\n        <g fill=\"url(#gradient)\">\r\n          {this.makeAxis()}\r\n          {this.makePath()}\r\n          {this.makeArea()}\r\n          {this.makeLabels()}\r\n          {this.state.hoverLoc ? this.createLine() : null}\r\n          {this.state.hoverLoc ? this.makeActivePoint() : null}\r\n        </g>\r\n      </svg>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// DEFAULT PROPS\r\nLineChart.defaultProps = {\r\n  data: [],\r\n  color: '#FFBE3B',\r\n  pointRadius: 5,\r\n  svgHeight: 450,\r\n  svgWidth: 1200,\r\n  xLabelSize: 20,\r\n  yLabelSize: 80\r\n}\r\n\r\nexport default LineChart;\r\n\r\n/*<i class=\"fa fa-line-chart\" aria-hidden=\"true\"></i>*/\r\n\r\n/*\r\n              <stop stopColor=\"#FF8F00\" offset=\"0\"/>\r\n              <stop stopColor=\"#FFE4C0\" offset=\"100%\"/>\r\n*/\r\n\r\n/*\r\n            <linearGradient x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\" id=\"gradient\">\r\n              <stop stop-color=\"#c86dd7\" offset=\"0\"/>\r\n              <stop stop-color=\"#3023ae\" offset=\"100%\"/>\r\n            </linearGradient>\r\n*/\r\n\r\n/*\r\n            <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"100%\">\r\n              <stop offset=\"0\" stop-color=\"#FFB600\" />\r\n              <stop offset=\"100\" stop-color=\"#FFD765\" />\r\n            </linearGradient>\r\n*/\r\n\r\n\r\n/*\r\n            <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n            <stop offset=\"0%\" style=\"stop-color:rgb(255,0,0);stop-opacity:1\" />\r\n            <stop offset=\"100%\" style=\"stop-color:rgb(255,255,0);stop-opacity:1\" />\r\n            </linearGradient>\r\n*/","import React, { Component } from 'react';\r\n\r\nclass ToolTip extends Component {\r\n\r\n  render() {\r\n    const {hoverLoc, activePoint} = this.props;\r\n    const svgLocation = document.getElementsByClassName(\"linechart\")[0].getBoundingClientRect();\r\n\r\n    let placementStyles = {};\r\n    let width = 100;\r\n    placementStyles.width = width + 'px';\r\n    placementStyles.left = hoverLoc + svgLocation.left - (width/2);\r\n\r\n    return (\r\n      <div className='hover' style={ placementStyles }>\r\n        <div className='date'>{ activePoint.d }</div>\r\n        <div className='price'>{ activePoint.p }</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ToolTip;","import React from 'react';\nimport StatsDisplay from './components/StatsDisplay'\nimport LineChart from './components/LineChart'\nimport ToolTip from './components/ToolTip'\nimport moment from 'moment';\nimport  './App.css'\n\nconst api_url = 'https://api.coindesk.com/v1/bpi/historical/close.json';\n\nclass App extends React.Component {\n\n  state={\n    fetchingData: true,\n    data: null,\n    hoverLoc: null,\n    activePoint: null\n  }\n\n  componentDidMount()\n  {\n    console.log('App Component Mounted');\n    const getData = () =>{\n      fetch(api_url).then(d => d.json()).then((Data) =>{\n        const arr = [];\n        let count = 0;\n        for(let date in Data.bpi)\n        {\n          arr.push({\n            date: moment(date).format('MMM Do YY'),\n            pDollars: Data.bpi[date].toLocaleString('us-EN',{style:'currency',currency:'USD'}),\n            index: count,//prev days\n            pValue: Data.bpi[date]//price\n          });\n          count++;\n        }\n        this.setState({\n          data:arr,\n          fetchingData:false \n        });\n      }).catch((e) =>{\n        console.log(e);\n      });\n    }\n    getData();\n  }\n\n  handleHover(hoverLoc,activePoint)\n  {\n    this.setState({\n      hoverLoc: hoverLoc,\n      activePoint: activePoint \n    });\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"title\"><h1>Bitcoin Tracker</h1></div>\n        <div className=\"StatsDisplay_container\">\n        {this.state.data ?\n        <StatsDisplay data={this.state.data}></StatsDisplay>\n        :null}\n        </div>\n        <div className=\"linechart_title\">\n        <h3>Line Chart <i className=\"fa fa-line-chart\" aria-hidden=\"true\"></i> </h3>\n        </div>\n        <div className='ToolTip_container'>\n        {this.state.hoverLoc ? \n        <ToolTip hoverLoc={this.state.hoverLoc} activePoint={this.state.activePoint}/> \n        :null}\n        </div>\n        <div className=\"LineChart_container\">\n        {!this.state.fetchingData ?  \n        <LineChart data={this.state.data} onHover={(a,b) => this.handleHover(a,b)} ></LineChart>\n        :null}\n        </div>\n        <div className=\"Reference\"><a href=\"https://www.coindesk.com/price/bitcoin\" target=\"_blank\">Powered by CoinDesk</a></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}